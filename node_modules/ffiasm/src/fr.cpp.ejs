#include "<%=name.toLowerCase()+".hpp"%>"
#include <stdio.h>
#include <stdlib.h>
#include <gmp.h>
#include <assert.h>
#include <string>


static mpz_t q;
static mpz_t zero;
static mpz_t one;
static mpz_t mask;
static size_t nBits;
static bool initialized = false;


void <%=name%>_toMpz(mpz_t r, P<%=name%>Element pE) {
    <%=name%>_toNormal(pE, pE);
    if (!(pE->type & <%=name%>_LONG)) {
        mpz_set_si(r, pE->shortVal);
        if (pE->shortVal<0) {
            mpz_add(r, r, q);
        }
    } else {
        <%=name%>_toNormal(pE, pE);
        mpz_import(r, <%=name%>_N64, -1, 8, -1, 0, (const void *)pE->longVal);
    }
}

void <%=name%>_fromMpz(P<%=name%>Element pE, mpz_t v) {
    if (mpz_fits_sint_p(v)) {
        pE->type = <%=name%>_SHORT;
        pE->shortVal = mpz_get_si(v);
    } else {
        pE->type = <%=name%>_LONG;
        for (int i=0; i<<%=name%>_N64; i++) pE->longVal[i] = 0;
        mpz_export((void *)(pE->longVal), NULL, -1, 8, -1, 0, v);
    }
}


bool <%=name%>_init() {
    if (initialized) return false;
    initialized = true;
    mpz_init(q);
    mpz_import(q, <%=name%>_N64, -1, 8, -1, 0, (const void *)<%=name%>_q.longVal);
    mpz_init_set_ui(zero, 0);
    mpz_init_set_ui(one, 1);
    nBits = mpz_sizeinbase (q, 2);
    mpz_init(mask);
    mpz_mul_2exp(mask, one, nBits);
    mpz_sub(mask, mask, one);
    return true;
}

void <%=name%>_str2element(P<%=name%>Element pE, char const *s) {
    mpz_t mr;
    mpz_init_set_str(mr, s, 10);
    mpz_fdiv_r(mr, mr, q);
    <%=name%>_fromMpz(pE, mr);
    mpz_clear(mr);
}

char *<%=name%>_element2str(P<%=name%>Element pE) {
    mpz_t r;
    if (!(pE->type & <%=name%>_LONG)) {
        if (pE->shortVal>=0) {
            char *r = new char[32];
            sprintf(r, "%d", pE->shortVal);
            return r;
        } else {
            mpz_init_set_si(r, pE->shortVal);
            mpz_add(r, r, q);
        }
    } else {
        <%=name%>_toNormal(pE, pE);
        mpz_init(r);
        mpz_import(r, <%=name%>_N64, -1, 8, -1, 0, (const void *)pE->longVal);
    }
    char *res = mpz_get_str (0, 10, r);
    mpz_clear(r);
    return res;
}

void <%=name%>_idiv(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    mpz_t ma;
    mpz_t mb;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mb);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    // char *s1 = mpz_get_str (0, 10, ma);
    // printf("s1 %s\n", s1);
    <%=name%>_toMpz(mb, b);
    // char *s2 = mpz_get_str (0, 10, mb);
    // printf("s2 %s\n", s2);
    mpz_fdiv_q(mr, ma, mb);
    // char *sr = mpz_get_str (0, 10, mr);
    // printf("r %s\n", sr);
    <%=name%>_fromMpz(r, mr);

    mpz_clear(ma);
    mpz_clear(mb);
    mpz_clear(mr);
}

void <%=name%>_mod(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    mpz_t ma;
    mpz_t mb;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mb);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    <%=name%>_toMpz(mb, b);
    mpz_fdiv_r(mr, ma, mb);
    <%=name%>_fromMpz(r, mr);

    mpz_clear(ma);
    mpz_clear(mb);
    mpz_clear(mr);
}

void <%=name%>_shl(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    mpz_t ma;
    mpz_t mb;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mb);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    <%=name%>_toMpz(mb, b);
    if (mpz_cmp_ui(mb, nBits) < 0) {
        mpz_mul_2exp(mr, ma, mpz_get_ui(mb));
        mpz_and(mr, mr, mask);
        if (mpz_cmp(mr, q) >= 0) {
            mpz_sub(mr, mr, q);
        }
    } else {
        mpz_sub(mb, q, mb);
        if (mpz_cmp_ui(mb, nBits) < 0) {
            mpz_tdiv_q_2exp(mr, ma, mpz_get_ui(mb));
        } else {
            mpz_set(mr, zero);
        }
    }
    <%=name%>_fromMpz(r, mr);

    mpz_clear(ma);
    mpz_clear(mb);
    mpz_clear(mr);
}

void <%=name%>_shr(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    mpz_t ma;
    mpz_t mb;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mb);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    <%=name%>_toMpz(mb, b);
    if (mpz_cmp_ui(mb, nBits) < 0) {
        mpz_tdiv_q_2exp(mr, ma, mpz_get_ui(mb));
    } else {
        mpz_sub(mb, q, mb);
        if (mpz_cmp_ui(mb, nBits) < 0) {
            mpz_mul_2exp(mr, ma, mpz_get_ui(mb));
            mpz_and(mr, mr, mask);
            if (mpz_cmp(mr, q) >= 0) {
                mpz_sub(mr, mr, q);
            }
        } else {
            mpz_set(mr, zero);
        }
    }
    <%=name%>_fromMpz(r, mr);
    mpz_clear(ma);
    mpz_clear(mb);
    mpz_clear(mr);

}


void <%=name%>_pow(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    mpz_t ma;
    mpz_t mb;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mb);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    <%=name%>_toMpz(mb, b);
    mpz_powm(mr, ma, mb, q);
    <%=name%>_fromMpz(r, mr);

    mpz_clear(ma);
    mpz_clear(mb);
    mpz_clear(mr);
}

void <%=name%>_inv(P<%=name%>Element r, P<%=name%>Element a) {
    mpz_t ma;
    mpz_t mr;
    mpz_init(ma);
    mpz_init(mr);

    <%=name%>_toMpz(ma, a);
    mpz_invert(mr, ma, q);
    <%=name%>_fromMpz(r, mr);
    mpz_clear(ma);
    mpz_clear(mr);
}

void <%=name%>_div(P<%=name%>Element r, P<%=name%>Element a, P<%=name%>Element b) {
    <%=name%>Element tmp;
    <%=name%>_inv(&tmp, b);
    <%=name%>_mul(r, a, &tmp);
}

void <%=name%>_fail() {
    assert(false);
}


Raw<%=name%>::Raw<%=name%>() {
    <%=name%>_init();
    fromString(fZero, "0");
    fromString(fOne, "1");
    neg(fNegOne, fOne);
}

Raw<%=name%>::~Raw<%=name%>() {
}

void Raw<%=name%>::fromString(Element &r, std::string s) {
    mpz_t mr;
    mpz_init_set_str(mr, s.c_str(), 10);
    mpz_fdiv_r(mr, mr, q);
    for (int i=0; i<<%=name%>_N64; i++) r.v[i] = 0;
    mpz_export((void *)(r.v), NULL, -1, 8, -1, 0, mr);
    <%=name%>_rawToMontgomery(r.v,r.v);
}


std::string Raw<%=name%>::toString(Element &a, uint32_t radix) {
    Element tmp;
    mpz_t r;
    <%=name%>_rawFromMontgomery(tmp.v, a.v);
    mpz_init(r);
    mpz_import(r, <%=name%>_N64, -1, 8, -1, 0, (const void *)(tmp.v));
    char *res = mpz_get_str (0, radix, r);
    mpz_clear(r);
    std::string resS(res);
    free(res);
    return resS;
}

void Raw<%=name%>::inv(Element &r, Element &a) {
    mpz_t mr;
    mpz_init(mr);
    mpz_import(mr, <%=name%>_N64, -1, 8, -1, 0, (const void *)(a.v));
    mpz_invert(mr, mr, q);


    for (int i=0; i<<%=name%>_N64; i++) r.v[i] = 0;
    mpz_export((void *)(r.v), NULL, -1, 8, -1, 0, mr);

    <%=name%>_rawMMul(r.v, r.v,<%=name%>_rawR3);
    mpz_clear(mr);
}

void Raw<%=name%>::div(Element &r, Element &a, Element &b) {
    Element tmp;
    inv(tmp, b);
    mul(r, a, tmp);
}

/*
void Raw<%=name%>::scalarBits(Scalar &r, Element &a) {
    Element tmp;
    <%=name%>_rawFromMontgomery(tmp.v, a.v);
    r.l = 0;
    for (int i=0; i<<%=name%>_N64*64; i++) {
        int word = i >> 6;
        int bit = i & 0x3F;
        r.v[i] = (tmp.v[word] & (1LL << bit)) >> bit;
        if (r.v[i]) r.l = i+1;
    }
}
*/

void Raw<%=name%>::toMpz(mpz_t r, Element &a) {
    Element tmp;
    <%=name%>_rawFromMontgomery(tmp.v, a.v);
    mpz_import(r, <%=name%>_N64, -1, 8, -1, 0, (const void *)tmp.v);
}

static bool init = <%=name%>_init();


